plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    runs {
        data {
            inherit client
            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/generated/resources")}"
            vmArg "-Dfabric-api.datagen.modid=${mod_id}"
            vmArg "-Dfabric-api.datagen.strict-validation"

            runDir "build/datagen"
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

repositories {
    maven { url "https://maven.architectury.dev/" }
    maven { url "https://maven.shedaniel.me" }
    maven { url "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/" }
    maven { url "https://api.modrinth.com/maven" }
    mavenCentral()
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }

    modImplementation "fuzs.forgeconfigapiport:forgeconfigapiport-fabric:5.0.3"
    modImplementation "curse.maven:markdownmanual-502485:4306715"
    modImplementation("me.shedaniel:RoughlyEnoughItems-fabric:10.0.581") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    modRuntimeOnly "curse.maven:tooltipfix-411557:4167237"
    modRuntimeOnly "maven.modrinth:sodium:mc1.19.3-0.4.9"
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    inputFile.set(shadowJar.archiveFile)
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = "${mod_id}-${rootProject.minecraft_version}-${project.name}"
            from components.java
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = System.getenv("GITHUB_MAVEN_URL") ?: ""
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

curseforge {
    apiKey = System.getenv("CURSEFORGE_API_KEY") ?: ""
    project {
        id = rootProject.curse_project_id
        releaseType = "release"
        changelogType = "markdown"
        changelog = System.getenv("CHANGELOG") ?: "Changelog not available."
        addGameVersion "Fabric"
        addGameVersion rootProject.minecraft_version
        addGameVersion "Java 17"
        relations {
            requiredDependency "fabric-api"
            requiredDependency "architectury-api"
            requiredDependency "forge-config-api-port-fabric"
            requiredDependency "markdownmanual"
        }
        mainArtifact(remapJar)
        afterEvaluate {
            uploadTask.dependsOn(remapJar)
        }
    }
    options {
        forgeGradleIntegration = false
    }
}

modrinth {
    token = System.getenv("MODRINTH_API_KEY") ?: ""
    projectId = rootProject.modrinth_project_id
    changelog = System.getenv("CHANGELOG") ?: "Changelog not available."
    versionNumber = "MC${rootProject.minecraft_version}-${project.name}-${rootProject.semver}"
    versionName = "${mod_id}-${project.version}"
    versionType = "release"
    uploadFile = remapJar
    gameVersions = [rootProject.minecraft_version]
    loaders = ["fabric"]
    dependencies {
        required.project "fabric-api"
        required.project "architectury-api"
        required.project "forge-config-api-port"
        required.project "markdownmanual"
    }
}
