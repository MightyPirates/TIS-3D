plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.0-SNAPSHOT" apply false
    id "com.matthewprenger.cursegradle" version "1.4.0" apply false
    id "com.modrinth.minotaur" version "2.5.0" apply false
}

architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        mappings loom.officialMojangMappings()
    }
}

def getGitRef() {
    try {
        final def stdout = new ByteArrayOutputStream()
        exec {
            commandLine "git", "rev-parse", "--short", "HEAD"
            standardOutput = stdout
        }
        return stdout.toString().trim()
    } catch (final Throwable ignored) {
        return "unknown"
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "com.matthewprenger.cursegradle"
    apply plugin: "com.modrinth.minotaur"
    apply plugin: "maven-publish"

    archivesBaseName = "${rootProject.archives_base_name}-MC${rootProject.minecraft_version}-${project.name}"
    version = "${rootProject.semver}+${getGitRef()}"
    group = rootProject.maven_group
    ext {
        mod_id = rootProject.archives_base_name
    }

    repositories {
        maven {
            url "https://cursemaven.com"
            content { includeGroup "curse.maven" }
        }
    }

    dependencies {
        compileOnly "com.google.code.findbugs:jsr305:3.0.2"
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release.set(17)
    }

    jar {
        from("LICENSE") {
            rename { "${it}_${rootProject.archivesBaseName}" }
        }
    }

    idea {
        module {
            for (final String exclude in ["out", "logs"]) {
                excludeDirs += file(exclude)
            }
        }
    }
}
